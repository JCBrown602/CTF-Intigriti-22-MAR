# ENCRYPT.py

from sympy import isprime, prime

flag = '<REDACTED>'
flagBin = '1001100000110, 1001100000100, 1001100000100, 1001100000000, 1001101100010, 1001101100111, 1001101001100, 1001101001111, 1001100000111, 1001101000101, 1001101101000, 1001100000011, 1001101011001, 1001101110011, 1001101101000, 1001101110101, 1001101011110, 1001101011001, 1001100000011, 1001011001010, 1001101100101, 1001101001110, 1001101101000, 1001101110010, 1001101011001, 1001001111100, 1001100000111, 1001101010011, 1001100000100, 1001101000101, 1001101101000, 1001100000011, 1001101000101, 1001100000100, 1001101101000, 1001101000011, 1001101111111, 1001100000100, 1001101101000, 1001101100000, 1001100000100, 1001100000011, 1000101111100, 1001100000100, 1001111000110, 1001101000011, 1001101101000, 1001100001111, 1001100000111, 1001100000000, 1001100001110, 1001100000111, 1001100000000, 1001111000110, 1001100000001, 1001101001010'
flagValues = flagBin.split(', ')
print(flagValues)

# changes the flag from unicode chars to integers
def Ord(flag):
    x0r([ord(i) for i in flag])
    
def unOrd(flagValues):
    d3c(flagValues)

    print(prime(2))
    print(prime(5))
    print(prime(11)) # 13
    print(prime(16)) # 17
    print(prime(20)) # 23

def x0r(listt):
    ff = []
    for i in listt:
        if isprime(i) == True:
            #ff.append(prime(i) ^ 0x1337)
            #ff.append(prime(i))
            ff.append(int(100))
        else:
            #ff.append(i ^ 0x1337)
            #ff.append(i)
            ff.append(int(333))
    b1n(ff)
    b1n2(ff)
    print('>TESTING...')
    d3c(ff)

def x1r(listr):
    ff = []
    print type(listr[1])
    print listr[1] + listr[2]
    for i in listr:
        if isprime(i):
            print('---------')
            print(0x1337)
            print(i)
            print(prime(i))
            print(prime(i) ^ 0x1337)

            print('+++')
            a = i
            x = prime(i)
            y = 0x1337
            z = (1/0x1337)
            print "> x = prime(i): ", x
            print "> y = 0x1337: ", y
            print "> z = 1/0x1337: ", z
            print "> x^y from original problem: ", x^y
            print "> x^z should reverse it back to prime(i)", x^z
            print "---"
            print "> a = i: ", a
            print "> a^y: ", a^y
            print "> a^z: ", a^z
            print "+++"
        else:
            print('---------')
            print(i)
            print('not')

def b1n(listt):
    ff = []
    for i in listt:
        ff.append(int(bin(i)[2:]))
    print(ff)

def b1n2(listt):
    ff = []
    for i in listt:
        ff.append(int(i))
    print(ff)
    
def d3c(flagValues):
    ff = []
    for i in flagValues:
        ff.append(int(i, 2))
    print(ff)
    x1r(ff)

if __name__ == "__main__":
    #Ord(flag)
    unOrd(flagValues)

'''
 OUTPUT :
[1001100000110, 1001100000100, 1001100000100, 1001100000000, 1001101100010, 1001101100111, 1001101001100, 1001101001111, 1001100000111, 1001101000101, 1001101101000, 1001100000011, 1001101011001, 1001101110011, 1001101101000, 1001101110101, 1001101011110, 1001101011001, 1001100000011, 1001011001010, 1001101100101, 1001101001110, 1001101101000, 1001101110010, 1001101011001, 1001001111100, 1001100000111, 1001101010011, 1001100000100, 1001101000101, 1001101101000, 1001100000011, 1001101000101, 1001100000100, 1001101101000, 1001101000011, 1001101111111, 1001100000100, 1001101101000, 1001101100000, 1001100000100, 1001100000011, 1000101111100, 1001100000100, 1001111000110, 1001101000011, 1001101101000, 1001100001111, 1001100000111, 1001100000000, 1001100001110, 1001100000111, 1001100000000, 1001111000110, 1001100000001, 1001101001010]
'''

